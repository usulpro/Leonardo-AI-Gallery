/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Fes4s2CoCqZ
 */
import React from 'react';
import { CardHeader, CardContent, CardFooter, Card } from './ui/card';
import { Button } from './ui/button';
import { Tabs } from './ui/tabs';
import { ExpandIcon, SmileIcon, UploadIcon } from './icons/v0';

const imageSrc =
  'https://cdn.leonardo.ai/users/eaedaca1-ddc9-4ba8-8e04-54f5efbd2cc3/generations/c078f064-0fd2-468f-84f1-06dada47f0fa/Leonardo_Diffusion_XL_ski_boots_elegant_white_blue_and_orange_0.jpg';

interface Context {
  isUploaded: boolean;
}

const action1Status = (context: Context = { isUploaded: false }) => {
  const color = context.isUploaded ? 'text-gray-400' : 'text-gray-600';
  return <span className={color}>‚¨Ü</span>;
};

const imageVariations = [
  {
    name: 'smooth',
    title: 'Smooth Upscale',
    postProcessIcon: () => <span className="text-[2rem]">üçè</span>,
    isCreated: false,
    renderAction1Status: action1Status,
    context: {
      isUploaded: false,
    },
  },
  {
    name: 'alchemy',
    title: 'Alchemy Upscale',
    postProcessIcon: () => <span className="text-[2rem]">üçé</span>,
    isCreated: false,
    renderAction1Status: action1Status,
    context: {
      isUploaded: false,
    },
  },
  {
    name: 'background',
    title: 'Remove Background',
    postProcessIcon: () => <span className="text-[2rem]">üçå</span>,
    isCreated: false,
    renderAction1Status: action1Status,
    context: {
      isUploaded: false,
    },
  },
  {
    name: 'refine',
    title: 'Refined',
    postProcessIcon: () => <span className="text-[2rem]">üåü</span>,
    isCreated: false,
    renderAction1Status: action1Status,
    context: {
      isUploaded: false,
    },
  },
];

const tabBorderColor = 'border-gray-400';

type TabButtonProps = {
  title: string;
  isActive: boolean;
  postProcessIcon?: (context: any) => JSX.Element;
  isCreated?: boolean;
  renderAction1Status?: (context: any) => JSX.Element;
  context?: object;
  onActivate: () => void;
};

const TabButton: React.FC<TabButtonProps> = ({
  title,
  isActive,
  postProcessIcon = () => <span className="text-[2rem]">üçè</span>,
  isCreated = true,
  renderAction1Status = () => '‚¨Ü',
  context = {},
  onActivate,
}) => {
  const bgColor = isActive ? 'bg-gray-700' : 'bg-gray-800';
  const top = isActive ? 'top-[-1px]' : '';
  const height = isActive ? 'h-[122px]' : 'h-[120px]';
  const border = isActive ? `border-l border-r border-b ${tabBorderColor}` : '';
  const isCreatedColor = isCreated ? 'text-white' : 'text-gray-500';
  return (
    <Button
      className={`${bgColor} ${top} ${height} ${border} p-4 rounded-none rounded-b-lg  relative`}
      variant="ghost"
      onClick={onActivate}
    >
      <div className="text-white font-bold text-xl text-center flex flex-col items-center">
        <div className="w-full h-3 flex justify-center">
          {postProcessIcon(context)}
        </div>
        <div className="flex space-x-1 mt-2 justify-between w-full mb-2">
          <div className={isCreatedColor}>‚úî</div>
          <div>{renderAction1Status(context)}</div>
        </div>
        <p className="text-sm">{title || 'unknown style'}</p>
      </div>
    </Button>
  );
};

export function VariantCard() {
  const [activeTab, setActiveTab] = React.useState(imageVariations[0].name);

  const handleTabActivate = (name: string) => () => {
    setActiveTab(name);
  };

  return (
    <Card
      key="1"
      className="w-[655px] bg-gray-800 text-white"
      style={{
        borderWidth: '4px',
        borderStyle: 'solid',
        borderImage:
          'linear-gradient(216deg, #a6004b, #df03ff, #0041c3) 1 / 1 / 0 stretch',
      }}
    >
      <CardHeader className="flex justify-between flex-row align-baseline p-4 border-b border-gray-700">
        <div className="flex items-center space-x-2">
          <SmileIcon className="text-blue-500" />
          <span>Smooth Upscaled Image</span>
        </div>
        <div className="flex items-center space-x-2 ml-auto">
          <UploadIcon className="text-blue-500" />
          <span>Uploaded</span>
        </div>
      </CardHeader>
      <CardContent className="relative group p-0">
        <img
          alt="Smooth Upscaled Image"
          className="w-full"
          height="400"
          src={imageSrc}
          style={{
            aspectRatio: '655/400',
            objectFit: 'cover',
          }}
          width="655"
        />
        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity">
          <Button className="m-2 bg-white text-black rounded-full p-8">
            <ExpandIcon className="mx-auto" />
          </Button>
          <Button className="m-2 bg-white text-black absolute top-0 left-0">
            Action 1
          </Button>
          <Button className="m-2 bg-white text-black absolute top-0 right-0">
            Action 2
          </Button>
        </div>
      </CardContent>
      <div className={`bg-gray-700 h-3 w-full border-b-2 ${tabBorderColor}`} />
      <CardFooter className="flex flex-col justify-between pt-0 bg-gray-900">
        <Tabs>
          <div className="flex gap-3 justify-start relative">
            {imageVariations.map((variant) => (
              <TabButton
                isActive={activeTab === variant.name}
                onActivate={handleTabActivate(variant.name)}
                title={variant.title}
                context={variant.context}
                isCreated={variant.isCreated}
                key={variant.name}
                postProcessIcon={variant.postProcessIcon}
                renderAction1Status={variant.renderAction1Status}
              />
            ))}
          </div>
        </Tabs>
      </CardFooter>
    </Card>
  );
}
