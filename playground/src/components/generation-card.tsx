/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/5P1s8U1ouwj
 */
import React, { useState } from 'react';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Button } from './ui/button';

export const GenerationCardDefaultProps = {
  promptTitle: 'Create a round thumbnail...',
  modelName: 'Leonardo Diffusion XL',
  inputResolution: '512 Ã— 512px',
  createdDate: '06/01/24 at 12:48 PM',
  pipeline: 'Alchemy V2',
  seed: 624471552,
  preset: 'Dynamic',
  promptMagic: '-',
  initStrength: 'No init image',
  highContrast: '-',
  prompt:
    'ski slope in the alps. beautiful weather, bright sunshine, beautiful snow-covered slope, ski run between snow-covered spruce trees. blue, yellow, orange flags, happy people, big mountains in background',
  negativePrompt: 'nsfw, nude, nudity, text',
};

type GenerationCardProps = {
  promptTitle: string;
  modelName: string;
  inputResolution: string;
  createdDate: string;
  pipeline: string;
  seed: number;
  preset: string;
  promptMagic: string;
  initStrength: string;
  highContrast: string;
  prompt: string;
  negativePrompt: string;
  onRegenerate: ({
    prompt,
    negativePrompt,
    seed,
  }: {
    prompt: string;
    negativePrompt: string;
    seed: number;
  }) => void;
};

export function GenerationCard({
  promptTitle,
  modelName,
  inputResolution,
  createdDate,
  pipeline,
  seed,
  preset,
  promptMagic,
  initStrength,
  highContrast,
  prompt,
  negativePrompt,
  onRegenerate,
}: GenerationCardProps) {
  const [currentPrompt, setPrompt] = useState(prompt);
  const [currentNegativePrompt, setNegativePrompt] = useState(negativePrompt);
  const [currentSeed, setSeed] = useState(seed);

  const handleRegenerate = () => {
    onRegenerate({
      prompt: currentPrompt,
      negativePrompt: currentNegativePrompt,
      seed: currentSeed,
    });
  };

  return (
    <div key="1" className="bg-[#1a1a1a] text-white p-4 rounded-lg max-w-md">
      <h2 className="text-xl font-bold mb-4">{promptTitle}</h2>
      <div className="flex items-center mb-4">
        <PencilIcon className="text-blue-500 mr-2" />
        <h3 className="text-lg font-semibold">{modelName}</h3>
      </div>
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div>
          <p className="text-sm font-medium text-gray-400">Input Resolution</p>
          <p className="text-sm">{inputResolution}</p>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-400">Created</p>
          <p className="text-sm">{createdDate}</p>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-400">Pipeline</p>
          <div className="flex items-center">
            <CheckCircleIcon className="text-green-500 mr-1" />
            <p className="text-sm">{pipeline}</p>
          </div>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-400">Seed</p>
          <p className="text-sm">
            <Input
              className="bg-[#333333] border border-gray-400 text-white"
              value={currentSeed}
              onChange={(e) => setSeed(Number(e.target.value))}
              type="number"
            />
          </p>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-400">Preset</p>
          <p className="text-sm">{preset}</p>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-400">Prompt Magic</p>
          <p className="text-sm">{promptMagic}</p>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-400">Init Strength</p>
          <p className="text-sm">{initStrength}</p>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-400">High Contrast</p>
          <p className="text-sm">{highContrast}</p>
        </div>
      </div>
      <Textarea
        className="bg-[#333333] text-white mb-4"
        placeholder="Amigurumi, frog, HW*"
        value={currentPrompt}
        onChange={(e) => setPrompt(e.target.value)}
        style={{
          color: 'white',
        }}
      />
      <Textarea
        className="bg-[#4d4d4d] text-gray-400 mb-4"
        placeholder="nsfw, nude, nudity, text"
        value={currentNegativePrompt}
        onChange={(e) => setNegativePrompt(e.target.value)}
      />
      <Button
        className="bg-blue-500 hover:bg-blue-600 w-full py-3 rounded-md"
        onClick={handleRegenerate}
      >
        Regenerate
      </Button>
    </div>
  );
}

function PencilIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z" />
      <path d="m15 5 4 4" />
    </svg>
  );
}

function CheckCircleIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14" />
      <polyline points="22 4 12 14.01 9 11.01" />
    </svg>
  );
}
